[{"path":"https://engagement-center.github.io/nestwatchR/articles/a_Intro-and-Data-Access.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Introduction to NestWatch Data and Data Access","text":"ability allocate conservation efforts natural world depends detailed information life histories, distributions, abundances, population trends species time. goal NestWatch project, administered Cornell Lab Ornithology, preserve data collected members global participatory science community researchers enable study nest location, survival, phenology world’s bird populations. NestWatch designed track status trends reproductive biology birds, including nesting occurs, number eggs laid, many eggs hatch, many hatchlings survive fledging. database intended used study current condition breeding bird populations may changing time result climate change, habitat degradation loss, expansion urban areas, introduction non-native plants animals. vignette gives overview NestWatch Open Dataset, represents nest-level parameters individual nest checks. Knowledge structure database critical proper interpretation dataset. example discuss 54 data fields, ask data users review field explanations found Nest Watch data paper, Bailey et al. 2024.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/articles/a_Intro-and-Data-Access.html","id":"access","dir":"Articles","previous_headings":"","what":"Data Access","title":"Introduction to NestWatch Data and Data Access","text":"NestWatch Open Dataset freely accessible via Mendeley data repository, NestWatch website, nestwatchR::nw.getdata() function licensed CC -NC 4.0. Users free access modify data non-commercial use proper citation. downloading data, user agrees terms use prior use. Terms Use: NestWatch raw data provided “.” Cornell Lab Ornithology, NestWatch, affiliated related entities, content providers shall held responsible liable person, firm, corporation loss, damage, injury, claim, liability kind character based resulting use NestWatch data. , none aforementioned parties shall held liable improper incorrect use data.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/articles/a_Intro-and-Data-Access.html","id":"download-nestwatch-data","dir":"Articles","previous_headings":"Data Access","what":"Download NestWatch Data","title":"Introduction to NestWatch Data and Data Access","text":"two data products available download via function nestwatchR::nw.getdata(). argument, version =, function defines version dataset downloaded defaults latest version left blank. function download, unzip, import two dataframes global environment. Depending connection speed, may take minutes. ⚠️ function depends library reticulate requires Python installed machine. See installation instructions information. function uses Python within R access Mendeley data archive download Nest Watch datasets. run, two dataframes available global environment: NW.attempts NW.checks. dataframes yet saved machine–may wish use write.csv() saveRDS() access data without need re-download datasets.","code":"library(reticulate)  # Download the most current version of the NestWatch dataset  nw.getdata()  # Download the first version nw.getdata(version = 1)"},{"path":"https://engagement-center.github.io/nestwatchR/articles/a_Intro-and-Data-Access.html","id":"data-structure","dir":"Articles","previous_headings":"","what":"Data Structure","title":"Introduction to NestWatch Data and Data Access","text":"example, inspect sample datasets included within package:","code":"# Read in sample datasets NW.attempts <- nestwatchR::exNWattempts NW.checks <- nestwatchR::exNWchecks"},{"path":"https://engagement-center.github.io/nestwatchR/articles/a_Intro-and-Data-Access.html","id":"attempts-data","dir":"Articles","previous_headings":"Data Structure","what":"Attempts Data","title":"Introduction to NestWatch Data and Data Access","text":"NW.attempts contains nest-level parameters. fields include data species, coordinates, nest substrate, presence predator guards, etc. well summary data nest attempt nest fate, clutch size, first lay date, fledge date, etc. Attempt ID: assigned; categorical; unique identification assigned individual nest attempts. Location ID: assigned; categorical; unique identification assigned individual nest locations. May repeated within across years. Latitude: participant provided; numeric; Nest coordinate decimal degrees (NAD84). Longitude: participant provided; numeric; Nest coordinate decimal degrees (NAD84). Subnational Code: categorical; assigned; 2-letter country code joined hyphen 2-letter state/province code. Follows ISO 3166-2. Undefined represented “XX-”. Substrate Relationship: participant provided; Position nest relative surface nest built. One : , , Substrate: participant provided; categorical; surface nest built.One : nesbox (nest box/birdhouse), buildi (building dwelling), poptow (post/pole platform), cliled (cliff rock), ltrcav (cavity live tree branch), ssdtcv (cavity snag/dead tree), ssdtre (dead tree branch), ltrbra (live tree branch), busshr (bush/shrub/cattails), ground (ground), floveg (floating vegetation), . Substrate Description: participant provided; text; Description (specified Substrate “”. Height m: participant provided; numeric; Measurement height bottom nest ground (meters). Cavity Entrance Diameter cm: participant provided;Diameter entrance nest cavity nests (centimeters). Orientation: participant provided; categorical; Compass direction nest hole entrance faces. One : n, s, e, w, ne, se, sw, nw Elevation m: participant provided; numeric; Elevation nesting location sea level reported user (meters). Habitat 1m: participant provided; categorical; Habitat within 1 meter nest. One following high level descriptors: ag (agricultural area), (woodland/forest), grass (natural grassland prairie), chap (shrubland chaparral), des (desert), fw (fresh water), sw (salt water), beach (beach), tun (tundra), oth (), human (human modified landscape). , “human” chosen, user may optionally store one specific descriptors instead: ry (yard, residential area), park (public park/green space), road (roadside), golf (golf course), pit (land fill/gravel pit/strip mine), cem (cemetery), com-ind (industrial/commercial center), pwrln (powerline corridor), campus (campus/schoolyard/churc h/hospital), airprt (airport), cmpgrd (campground), xmas (Christmas tree farm), orch-vin (orchard/vineyard), clrcut (recently clear cut area), burn (recently burned area). Habitat 100m: participant provided; categorical; Habitat within 100 meters nest. Habitat 1m Location Entry Technique: assigned; Codes representing various methods site creation varying degrees positional accuracy. methods continue evolve online mapping technologies change. See IV.B.4.e descriptions discussion precision. Observer ID: assigned; categorical; unique code identifying observer making submission. Note observers one Observer ID, possible one individual create multiple accounts. possible identify participants multiple Observer IDs. Species Code: participant provided; categorical; Taxonomic code identity nesting species. See eBird taxonomy details. Species Name: participant provided; categorical; Common name (English) identity nesting species. See eBird taxonomy details. Year: assigned; integer; Year nest attempt started. Predator Guard: participant provided; categorical; nest attempts boxes, field indicates whether device intended prevent predation attached nesting structure (.e., predator guard). contains “” Predator Guard value. See Bailey Bonter 2017 information predator guard types. One : baffle, cone, holeExtender, , noelGuard, . Predator Guard : participant provided; text; Free text entered “” predator guard type selected. First Lay Date: participant provided; date; Date first egg laid. First Lay Date Estimated: participant provided;binary; Whether first lay date estimated (1) observed (0). Visited Egg Laying: participant provided; binary; Response “nest site visited egg laying period?” (1 = yes, 0 = ). variable originally intended gauge quality first egg date estimate time period nest check data collected (e.g., Birdhouse Network). retained later continuity even nest checks enabled participants may choose enter nest checks. See Cooper 2014 detail. Hatch Date: participant provided; date; Date first egg hatched. Hatch Date Estimated: participant provided; binary; Whether hatch date estimated (1) observed (0). Fledge Date: participant provided; date; Date first young fledged (left nest). Fledge Date Estimated: participant provided; binary; Whether fledge date estimated (1) observed (0). Young Fledged: participant provided;integer; Total number young fledged. Clutch Size: participant provided; integer; Maximum number host eggs nest (including eggs brood parasites). Young Total: participant provided; integer; Maximum number young (alive dead) host species nest (.e., hatched young). include young brood parasites. Unhatched Eggs: participant provided; integer; Maximum number host eggs failed hatch individual nest attempts (including eggs brood parasites). Outcome: participant provided; categorical; Fate nest attempt. categorical one : f (failure), f1 (young found dead nearby nest), f2 (young disappeared nest fledge date; reason unknown), f3 (predator known cause nest failure), f4 (young brood parasites fledged), f5 (invasive species management), f6 (eggs hatched), f7 (failure due nest takeover another bird), s1 (least one host young fledged), u1 (unknown outcome), u2 (nest monitoring stopped prior expected fledge date nest still active), u3 (breeding behavior observed), (inactive), n (monitored). Attempt Entry Technique: assigned; Indicates method data entry used initiate nest attempt. 2022, 3 modes data entry include NestWatch website (visits may entered via another method) value indicates various versions “Web” entry), mobile app (field value indicates various versions “Mobile” entry), bulk upload (field value indicates date uploading database).","code":""},{"path":"https://engagement-center.github.io/nestwatchR/articles/a_Intro-and-Data-Access.html","id":"checks-data","dir":"Articles","previous_headings":"Data Structure","what":"Checks Data","title":"Introduction to NestWatch Data and Data Access","text":"NW.checks contains information status contents nest individual nest check, including number eggs, young, dead young host brood parasites. Attempt ID: assigned; categorical; See prior description. Visit ID: assigned; categorical; Identifier assigned individual visits nest attempts. nest attempt many Visit ID values nest checks reported attempt. Visit Datetime: participant provided; datetime; date time individual nests visited. Time stored entry modes . Time may nearest hour older data, second mobile-entered data. Time stored user’s local time zone (time zone stored). See Visit Time Valid determine time stored data entry. Visit Time Valid: assigned; binary; Whether time portion Visit Datetime column stored treated actual time visit (1 = yes, 0 = ). Nest Status: participant provided; categorical; Condition nest nest visit. One : (nest), (another bird nest, site), cn (complete nest), dn (damaged nest), fn (flattened nest fecal matter), (incomplete nest), nn (non-avian nest), rn (nest removed, remover unknown). Adult Activity: participant provided; categorical; Adult activity seen heard near nest nest visit. can help determine nest still active, particularly contents seen directly. categorical One : (adults seen heard), aa (/, flushed nest), ba (building nest carrying nest material), da (dead adult(s)), fa (feeding young nest), ra (remained nest), va (vicinity nest). Young Status: participant provided; categorical; Developmental stage young nest visit. One : (live young nest), fy (fully feathered young), hy (hatching young), ny (naked young), py (partially feathered young), vy (vocal young, heard ), yy (young outside box). Management Status: participant provided; categorical; Management action taken nest monitor. One : (management activity), (avian competitor nest/eggs/young removed), bm (banded adults young nest), em (unhatched host eggs removed), nm (nest box management), pm (pest management [e.g., wasps, ants, mice, etc.]). Host Eggs Count: participant provided; integer; Number host eggs counted nest check. May null user provide information able count precisely. See also Host Eggs Present Uncounted. Host Eggs Present Uncounted: participant provided; binary; user may indicate host eggs present exact count unknown. case, Host Eggs Present Uncounted set 1. Nest checks Host Eggs Count > 0 Host Eggs Present Uncounted = 1 may considered host eggs. Live Host Young Count: participant provided; integer; Number live host young counted nest check. May null user provide information able count precisely. See also Live Host Young Present Uncounted. Live Host Young Present Uncounted: participant provided; binary; user may indicate live host young present exact count unknown. case, Live Host Young Present Uncounted set 1. Nest checks Live Host Young Count > 0 Live Host Young Present Uncounted = 1 may considered live host young. Dead Host Young Count: participant provided; integer; Number dead host young counted nest check. May null user provide information able count precisely. See also Dead Host Young Present Uncounted. Dead Host Young Present Uncounted: participant provided; binary; user may indicate dead host young present exact count unknown. case, Dead Host Young Present Uncounted set 1. Nest checks Dead Host Young Count > 0 Dead Host Young Present Uncounted = 1 may considered dead host young. Brood Parasite Eggs Count: participant provided; integer; Number brood parasite eggs counted nest check. May null user provide information able count precisely. See also Brood Parasite Eggs Present Uncounted. Brood Parasite Eggs Present Uncounted: participant provided; binary; user may indicate brood parasite eggs present exact count unknown. case, Brood Parasite Eggs Present Uncounted set 1. Nest checks Brood Parasite Eggs Count > 0 Brood Parasite Eggs Present Uncounted = 1 may considered brood parasite eggs. Brood Parasite Live Young Count: participant provided; integer; Number brood parasite live young counted nest check. May null user provide information able count precisely. See also Brood Parasite Live Young Present Uncounted. Brood Parasite Live Young Present Uncounted: participant provided; binary; user may indicate brood parasite live young present exact count unknown. case, Brood Parasite Live Young Present Uncounted set 1. Nest checks Brood Parasite Live Young Count > 0 Brood Parasite Live Young Present Uncounted = 1 may considered live brood parasite young. Brood Parasite Dead Young Count: participant provided; integer; Number brood parasite dead young counted nest check. May null user provide information able count precisely. See also Brood Parasite Dead Young Present Uncounted. Brood Parasite Dead: participant provided; binary; user may indicate brood parasite dead young present. Young Present Uncounted exact count unknown. case, Brood Parasite Dead Young Present Uncounted set 1. Nest checks Brood Parasite Dead Young Count > 0 Brood Parasite Dead Young Present Uncounted = 1 may considered dead brood parasite young. Visit Entry Technique: assigned; text; Method data entry created visit. 2022, 3 modes data entry include NestWatch website (field value indicates various versions “Web” entry), mobile app (field value indicates various versions “Mobile” entry), bulk upload (field value indicates date uploading database).","code":""},{"path":"https://engagement-center.github.io/nestwatchR/articles/a_Intro-and-Data-Access.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Introduction to NestWatch Data and Data Access","text":"analyses may require use data contained NW.attempts. However, suggest users merge two dataframes shared Attempt.ID available data -hand. suggested data-cleaning processes require use data dataframes, single merged dataset easily facilitates steps. two dataframes can merged using nestwatchR::nw.mergedata(). function three arguments: attempts = checks = used define appropriate dataframe optional output = can used specify name resulting merged dataframe.","code":"library(dplyr)  # Merge Attempts and Checks nw.mergedata(attempts = NW.attempts, checks = NW.checks, output = \"merged.data\") head(merged.data, 20)"},{"path":"https://engagement-center.github.io/nestwatchR/articles/b_Data-Cleaning.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Conduct Common NestWatch Data Cleaning Procedures","text":"NestWatch data entered real-time U.S. Canada passed series filters attempt catch data-entry errors prevent unlikely responses clutch size, number young, timing nesting, incubation periods, brooding periods. real-time feedback system identify potential errors. instance, participant enters number eggs incorrectly typo clutch size still biologically possible, feedback given. Even real-time feedback given, participant may override warning feel entry made accurate. Participants occasionally observe unusually large clutch sizes nests occurred well outside traditional nesting period focal species. analyst decide observations relevant. Importantly, initial biological filters established species nesting outside U.S. Canada species seldom reported. NestWatch additionally implements geographic filters real-time entered species, curated eBird. example, participant able report nest species extremely rare region, preventing many species misidentifications. However, similar sympatric species, incorrect identifications still possible (e.g., Black-capped Chickadee may misidentified Carolina Chickadee regions range overlap). However, older reports, including historic data migrated NestWatch database archival, subjected rigorous filters. Additionally, errors reporting can mimic errors identification. Participants may intend report one species enter data wrong species. recommend data analysts map nest locations screen likely errors. See nw.filterspatial() Filtering Vignette information spatial filtering.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/articles/b_Data-Cleaning.html","id":"clean-taxa","dir":"Articles","previous_headings":"","what":"Clean Taxa","title":"Conduct Common NestWatch Data Cleaning Procedures","text":"NestWatch platform uses eBird taxonomy standardize species’ names. allows participants select available eBird taxonomic unit, including “spuhs” (.e., “chickadee sp.”), slashes (.e., “Tree/Violet-green Swallow”), hybrids (.e., “Mallard x American Black Duck (hybrid)”), subspecies/forms (.e., “Downy Woodpecker (eastern)”). function nw.cleantaxa() helps filter /“roll ” taxonomic units. function uses NestWatch dataframe data = logical arguments spuh =, slash =, hybrid =, rollsubspecies = T removes attempts designations subspecies/forms “rolled ” species level (.e., “Downy Woodpecker (eastern)” → “Downy Woodpecker”). arguments set F NULL filtering /roll performed. resulting dataframe may optionally named output =. function changes common names species codes reflect changes made taxonomic unit. Taxonomy updates participant interface internal database implemented concurrently updates auk::get_ebird_taxonomy(). However, new versions NestWatch Open Dataset published January may taxonomically outdated short periods time (typically affects low number records). Previous versions NestWatch Open Dataset updated taxonomic corrections; encourage use recent version. information, see auk::ebird_taxonomy eBird Taxonomy.","code":"# Simple example dataframe df <- data.frame(Attempt.ID = c(1, 1, 2, 3, 4),                  Species.Name = c(\"Downy Woodpecker (Eastern)\", \"Downy Woodpecker (Eastern)\",                                  \"chickadee sp.\", \"Tree/Violet-green Swallow\",                                  \"Mallard x American Black Duck (hybrid)\"),                  Species.Code = c(\"dowwoo1\", \"dowwoo1\", \"chicka1\", \"y00701\", \"x00004\"))  df #>   Attempt.ID                           Species.Name Species.Code #> 1          1             Downy Woodpecker (Eastern)      dowwoo1 #> 2          1             Downy Woodpecker (Eastern)      dowwoo1 #> 3          2                          chickadee sp.      chicka1 #> 4          3              Tree/Violet-green Swallow       y00701 #> 5          4 Mallard x American Black Duck (hybrid)       x00004"},{"path":"https://engagement-center.github.io/nestwatchR/articles/b_Data-Cleaning.html","id":"spuhs-and-slashes","dir":"Articles","previous_headings":"Clean Taxa","what":"Spuhs and Slashes","title":"Conduct Common NestWatch Data Cleaning Procedures","text":"Correct usage “spuh” , example, participant observed chickadee nesting region Black-capped/Carolina Chickadee range overlap unable confirm exact species certainty. true participant monitored nest box swallow species never saw adults site Tree Violet-green Swallows present. cases, either slash spuh appropriate. certainty specie(s) needed, analyst may decide omit spuhs slashes species known certainty:","code":"# Remove spuhs and slashes nw.cleantaxa(data = df, spuh = T, slash = T, output = \"ex1\")  ex1 #>   Attempt.ID                           Species.Name Species.Code #> 1          1             Downy Woodpecker (Eastern)      dowwoo1 #> 2          1             Downy Woodpecker (Eastern)      dowwoo1 #> 5          4 Mallard x American Black Duck (hybrid)       x00004"},{"path":"https://engagement-center.github.io/nestwatchR/articles/b_Data-Cleaning.html","id":"subspeciesforms-hybrids","dir":"Articles","previous_headings":"Clean Taxa","what":"Subspecies/forms & Hybrids","title":"Conduct Common NestWatch Data Cleaning Procedures","text":"subspecies forms easily differentiated may specified participant. Caution taken using subspecies/form designations identification skills participant unknown participant may selected correct designation pre-populated list possible species. Consider whether may biologically relevant differences nesting behavior, phenology, parameters different subspecies/forms analyzing data level. potential differences biologically relevant analysis, analyst may opt rollsubspecies = T combine subspecies /forms species level. Documentation nesting attempts different parent species, hybrid parent, two hybrid parents uncommon. NestWatch database way easily differentiate three cases. Thus, hybrid species selected attempt, parent specie(s) nest vs resulting young specie known certainty. Additionally, participants may incorrectly select hybrid species selected spuh slash species designation. interested validating attempts labeled hybrid status, may request additional information NestWatch staff asking “notes” fields may contain additional information exported public dataset.","code":"# Remove hybrids and roll up subspecies nw.cleantaxa(data = df, hybrid = T, rollsubspecies = T, output = \"ex2\")  ex2 #>   Attempt.ID              Species.Name Species.Code #> 1          1          Downy Woodpecker       dowwoo #> 2          1          Downy Woodpecker       dowwoo #> 3          2             chickadee sp.      chicka1 #> 4          3 Tree/Violet-green Swallow       y00701"},{"path":"https://engagement-center.github.io/nestwatchR/articles/b_Data-Cleaning.html","id":"clean-data","dir":"Articles","previous_headings":"","what":"Clean Data","title":"Conduct Common NestWatch Data Cleaning Procedures","text":"function nw.cleandata() collection 11 common cleaning procedures NestWatch staff identified assist analysts cleaning NestWatch data coarse scale. need specify procedures run, lettered :k (case sensitive), highly suggest read function documentation following examples considering analyses selecting procedures run. coarse scale cleanings completed, user continue cleaning data finer scale including considering spatial phenological filtering. See Filtering Vignette nw.filterspatial() nw.filterphenology() functions. function nw.cleandata() takes NestWatch dataframe data = allows specify function’s mode = either \"flag\" \"remove\". mode set flag, nest attempts meet cleaning criteria noted new column Flagged.Attempt value FLAGGED NA. mode set remove, flagged attempts removed output. ⚠️ interested subset species, RAM usage processing time concern, may choose subset data species prior running nw.cleandata(). Individual cleaning procedures specified character vector lowercase letters :k. optional output = argument included optionally rename resulting dataframe well.","code":"# Example of subsetting to 2 focal species: Carolina and Bewick's Wrens # Using output \"merged.data\" from `nw.mergedata()` df <- merged.data %>% filter(Species.Code %in% c(\"carwre\", \"bewwre\"))  # Clean data function parameters nw.cleandata(data = df, mode = \"flag\", methods = c(\"a\", \"b\", \"c\") , output = \"cleaned.data\")"},{"path":"https://engagement-center.github.io/nestwatchR/articles/b_Data-Cleaning.html","id":"cleaning-procedure-definitions","dir":"Articles","previous_headings":"Clean Data","what":"Cleaning Procedure Definitions","title":"Conduct Common NestWatch Data Cleaning Procedures","text":"Brown-headed Cowbirds: Flag/remove attempts Species.Name “Brown-headed Cowbird” nest parasites create nests. correct interpretation nest species. Users may choose look data closely investigating brood parasitism. Nesting Activity: Flag/remove attempts Outcome “breeding behavior observed” (u3), “inactive” (), “monitored” (n). data likely represent nests nest boxes never received eggs unmonitored. Users may choose include data looking habitat location data without measures phenology success. Invasive Species Management: Flag/remove attempts Outcome “invasive species management” (f5). attempts, participant chose remove/alter eggs nests invasive species. user interested analyzing participants’ habits invasive species management using data fields (e.g., clutch size, first lay date), might consider skipping method understanding outcome code interpreted “failure due human interference” standard nest survival estimates meaningful. Note: “Invasive species management” may also incorrectly chosen participants trying indicate nest failure caused invasive species, case still prudent flag remove records. Failed fledged?: Flag/remove attempts outcome failure code (f, f1, f2, f3, f6, f7) recorded fledged host young > 0. case, participant may either characterized nest’s outcome incorrectly, recorded presence fledged host young incorrectly, mischaracterized brood parasite young host. Discerning true outcome may possible expedient. attempt produces number fledged host young, attempt considered successful. Successful didn’t fledge?: Flag/remove attempt Outcome success (s1), recorded fledged host young = 0. Inverse d. young eggs?: Flag/remove attempt # hatched host young > clutch size. may indicate incorrectly entered data long lengths time nest checks summary data properly updated. may choose review attempts looking caution nest visit data validate hatched young clutch sizes. fledged young hatched young: Flag/remove attempt # fledged host young > # hatched host young. Similar f. Unmapped Region Code: Flag/remove attempts NestWatch failed identify region (Subnational.Code == “XX-”). Subnational.Code automatically assigned based coordinates supplied participant. Many attempts identified XX- likely resulted nests located water bodies /participants entering incorrect coordinates. Consider removing “XX” attempts coordinates implausible focal species consider inclusion analyzing coastal water-nesting species (e.g., Osprey nesting channel markers). Decrease--increase Eggs/Young: Flag/remove attempts number eggs young decrease subsequently increases. may happen nest fails new attempt started location, two individual nesting attempts. analyst looking host response depredation events egg dumping may choose retain records. Impossibly long attempts: Flag attempts impossible nesting periods. Incorrect years sometimes entered date summary fields participants. may produce impossibly long nesting periods. account nesting phenologies hemispheres, procedure identifies attempts (1) Fledge Date - First Lay Date > 365 days, (2) Hatch Date - First Lay Date > 84 days, (3) Fledge Date - Hatch Date > 300 days. dates represent maximum nest phenological period bird species realistic majority NestWatch dataset. encourage users determine reasonable phenologies species interest use nw.filterphenology() run finer filter nest phenology dates. Year errors visits: Flag/remove attempts # days first last visit > 365 days. Additional check identify nest attempts year portion dates nest visits likely incorrectly entered. user may choose review attempts individually verify typo occurred. Depending cleaning procedures choose run, sample size nests may decrease varying degrees. species small sample size using mode = \"remove\" may consider rerunning mode = \"flag\" inspecting attempts removed cleaning method appropriate analysis. Particularly cleaning steps d:g, may prefer nullify questionable fields without deleting entire attempt (e.g.,analysis requires location, species, first lay date, may need remove attempts questionable outcome codes).","code":"# Load and merge version 2 of dataset nw.getdata(version = 2) nw.mergedata(attempts = NW.attempts, checks = NW.checks, output = \"merged.data\") length(unique(merged.data$Attempt.ID)) # > 648569    # Attempts in raw dataset   # Remove attempts with 'Brown-headed Cowbird' as the species nw.cleandata(data = merged.data, mode = \"remove\", methods = \"a\", output = \"no_bnhcow\") length(unique(no_bnhcow$Attempt.ID)) # > 648540    # Attempts after cleaning  # Remove attempts using \"j\" and \"k\" nw.cleandata(data = merged.data, mode = \"remove\", methods = c(\"j\", \"k\"), output = \"no_longnests\") length(unique(no_longnests$Attempt.ID)) # > 646753    # Attempts after cleaning"},{"path":"https://engagement-center.github.io/nestwatchR/articles/c_Data-Filtering.html","id":"filter-species","dir":"Articles","previous_headings":"","what":"Filter Species","title":"Filter NestWatch Data on Finer Scales","text":"Limiting dataset just species can easily done using pipe (%>%). unfamiliar “piping”, see migritrr package. subset version 2 NestWatch dataset include attempts Bewick’s Wren (“bewwre”) Carolina Wren (“carwre”). code walks download, merging, filtering species scratch. “wrens” data subset also included within package quick access using wrens <- nestwatchR::wren_quickstart:","code":"library(nestwatchR) library(dplyr)  # Download and merge datasets nw.getdata(version = 2) nw.mergedata(attempts = NW.attemps, checks = NW.checks, output = \"merged.data\")  # Filter data to include only carwre and bewwre wrens <- merged.data %>% filter(Species.Code %in% c(\"carwre\", \"bewwre\"))  # View what species are in the new dataset unique(wrens$Species.Name) > [1] \"Carolina Wren\" \"Bewick's Wren\""},{"path":"https://engagement-center.github.io/nestwatchR/articles/c_Data-Filtering.html","id":"filter-spatially","dir":"Articles","previous_headings":"","what":"Filter Spatially","title":"Filter NestWatch Data on Finer Scales","text":"Spatial filters flexible way limit data predefined geographic area. may choose limit analysis nesting attempts within certain area, like single Bird Conservation Region select number states. one may choose clean potentially misidentified species using range map filter nesting attempts. filtering criteria easily subset dataset, like states countries (via Subnational.Code), can quickly use subsetting rules filter data analysis. , criteria already easily subset-able, spatial filter can good option. example, can first view plot nests wrens located species. use package tmap produce interactive map. also utilizing sf package help create transform tabular data spatial data. project wrens data Lambert Conformal Conic Projection, well suited mapping areas United States (can change object prj appropriate PROJ.4 string area mapping). [!Note] unfamiliar working spatial data, good resource coordinate reference systems projections within R. looking map, can see several suspicious nests identified Bewick’s Wrens eastern United States. Bewick’s Wrens typically recorded east Mississippi River, records misidentified. decide subset states/provinces filter --range nest attempts, better method might filter nest locations based range map.","code":"# Create a spatial object from nest data nest_points <- sf::st_as_sf(wrens, coords = c(\"Longitude\", \"Latitude\"), crs = 4326)  # data are in WGS 84 (crs = 4326)  # Define desired CRS for data projection proj <- \"+proj=lcc +lon_0=-90 +lat_1=33 +lat_2=45\"  # PROJ.4 string defining the projection     # Project the nest points into LCC projection   nest_points <- sf::st_transform(nest_points, crs = proj)   # apply projection  # Map nest locations library(tmap) tmap_mode(\"view\")                                             # starts interactive plot map <- tm_basemap(\"Esri.WorldGrayCanvas\") +                   # define basemap        tm_shape(nest_points) +                                # add nest point data           tm_dots(col = \"Species.Name\",                       # color nests by species                   palette = c(\"#457999\", \"#8DCA8B\"),                   border.col = \"white\")  # View the map map"},{"path":"https://engagement-center.github.io/nestwatchR/articles/c_Data-Filtering.html","id":"ebird-range-map-polygons","dir":"Articles","previous_headings":"Filter Spatially","what":"eBird Range Map Polygons","title":"Filter NestWatch Data on Finer Scales","text":"eBird Status Trends Products contain wealth information bird populations. Among available products range maps species Status Trend Models run. data easily accessible R ebirdst package. access eBird data, need acquire free access key. key give access Status Trends Data within R. information acquire access key, see documentation . can use unique access key download range map Bewick’s Wren Carolina Wren. Note, need 6-letter species codes species like download, alpha code common name. modifying access key, species, download location code , can download open range polygons global environment. code selects breeding range layer available, unavailable selects resident range layer. Note: need input access key (R store !) need download range maps (may get error rerun ebirdst_download_status() data already exists spatialdata_path location). may also need modify year code belo depending Status & Trends data product available. Now range polygons Bewick’s Carolina Wrens, can add map investigate nest locations bit closer. Let’s plot just Bewick’s Wren data.  can now see nests outside typical Bewick’s Wren range. nests also close range border may truly belong Bewick’s Wren. can use nw.filterspatial() help us identify /remove nest attempts outside range polygon (shapefile may want filter ). nw.filterspatial() requires input sf objects points = polygon =, representing nest points filtered shapefile filtered, respectively. mode = argument used define points identified outside polygon flagged review (“flagged”) removed dataset (“remove”). function also optional buffer argument buffer = user may define distance outside polygon nest locations allowed. distance can either kilometers miles defined using buffer_units = \"km\" = \"mi\". resulting buffer polygon may optionally exported global environment saving plotting using logical buffer_output = T. user may also define desired projection using proj = inputting PROJ.4 string. provided function default Lambert Conformal Conic well suited plotting majority NestWatch data time. Finally, optional output = argument can used name resulting spatially-cleaned spatial dataframe. zoom central Colorado, can see Bewick’s Wren nests just outside range border. might choose keep nests like analysis, correctly identified just bit outside typical range. Let’s define buffer zone keep nests exclude well outside expected range: can plot results see points flagged review (removed mode ste “remove”):  can now quickly filter nests flagged locations outside defined range.","code":"# Obtain and set an ebird access key set_ebirdst_access_key(\"pasteyourkeyhere\")      # you only need to do this once, R will remember it  # Define what species you want to download by their 6-letter code spp <- c(\"bewwre\", \"carwre\")  # Specify where the data will be downloaded # Here we will reference a folder called \"spatial\" in our working directory: spatialdata_path <- c(\"spatial\")    # Download range maps by species for (i in spp) {   ebirdst_download_status(species = i, download_abundance = FALSE,                            download_ranges = TRUE, pattern = \"_smooth_27km_\",                            path = spatialdata_path) }  # You may need to modify the year below to reflect the appropriate S&T product that downloaded # Read in the range files for (i in spp) {   # Generate the path to the .gpkg files   file_path <- paste0(spatialdata_path, \"/2022/\", i, \"/ranges/\", i, \"_range_smooth_27km_2022.gpkg\")   # Read in the .gpkg file   range_data <- st_read(file_path)   # Generate the name for the object   object_name <- paste0(i, \"_range\")   # Assign the value to the dynamically-generated object name   assign(object_name, range_data)   rm(range_data) }  # Select just breeding layer if available, else resident layer object_names <- paste(spp, \"range\", sep = \"_\") for (i in object_names) {   if (i %in% ls(envir = .GlobalEnv)) {     data <- get(i, envir = .GlobalEnv)     if (any(data$season %in% \"breeding\")) {       data <- data %>% filter(season == \"breeding\")       data <- data %>% st_transform(nest_points, crs = prj)       assign(paste0(i), data, envir = .GlobalEnv)     } else {       data <- data %>% filter(season == \"resident\")       data <- data %>% st_transform(nest_points, crs = prj)       assign(paste0(i), data, envir = .GlobalEnv)}     rm(data)   } }  # Clean up intermediate objects rm(file_path, i, object_name, object_names, spatialdata_path) # Subset nest locations to Bewick's Wrens bewwre <- nest_points %>% filter(Species.Code == \"bewwre\")  # Map the nests onto the range polygon tmap_mode(\"view\")                                           # starts interactive plot map <- tm_basemap(\"Esri.WorldGrayCanvas\") +                 # define basemap   tm_shape(shp = bewwre_range, name = \"Bewick's Wren\") +    # add range polygon,      tm_polygons(alpha = 0.5,                  col = \"#B4CFE1\", border.col = NULL) +       # define polygon color         tm_shape(bewwre) +                                        # add nest points     tm_dots(col = \"Species.Name\",              border.col = \"grey90\", palette = c(\"#457999\"))  # define nest point color map nw.filterspatial(points = bewwre,                    # Bewick's Wren nest points                   polygon = bewwre_range,             # Bewick's Wren range shapefile                  mode = \"flag\",                      # flag points outside                   buffer = 50,                        # add a 50km buffer zone                  buffer_units = \"km\",                # units = km                  buffer_output = T,                  # yes, output the buffer polygon                  proj = \"+proj=lcc +lon_0=-90 +lat_1=33 +lat_2=45\",   # LCC from above                  output = \"flagged_nests\")           # define the output name # Relabel nests within range for nice map symbology flagged_nests$Flagged.Location[is.na(flagged_nests$Flagged.Location)] <- \"In-Range\"  map <- tm_basemap(\"Esri.WorldGrayCanvas\") +                 # define basemap   tm_shape(shp = polygon_buffered, name = \"50km Buffer\") +  # add buffered polygon, define color     tm_polygons(alpha = 0.5, col = \"#CEE6F3\", border.col = NULL) +                            tm_shape(shp = bewwre_range, name = \"Bewick's Wren Range\") +  # add range polygon, define color     tm_polygons(alpha = 0.5, col = \"#B4CFE1\", border.col = NULL) +                            tm_shape(flagged_nests) +                                 # add nest points, color by \"Flagged.Attempt\"     tm_dots(col = \"Flagged.Location\",              palette = c(\"#B31B1B\", \"#457999\"),             border.col = \"white\")     map # Remove flagged attempts nests_cleanlocs <- flagged_nests %>% filter(Flagged.Location == \"In-Range\")"},{"path":"https://engagement-center.github.io/nestwatchR/articles/c_Data-Filtering.html","id":"filter-using-nest-phenology","dir":"Articles","previous_headings":"","what":"Filter Using Nest Phenology","title":"Filter NestWatch Data on Finer Scales","text":"may also choose refine coarse phenologic filtering done cleaning process nw.cleandata(). NestWatch data known errors participants either enter dates incorrectly (.e., enter year portion date 2021 one field 2020 next) incorrectly continue nest attempt considered new nest (.e. nest usurpation failure--rebuild). example latter, bluebird nest fails due predation pair renests box, entered two different attempts location. records “run-nests” first attempt ended exist dataset. One way user might choose identify remove nesting attempts, ones outside expected nesting timeline given species, use phenologic filtering. Phenologic filtering allows user define allowed maximum number days different period nesting cycle, whole nesting cycle. function nw.filterphenology() uses data attempt summary info (data originating “Attempts” dataset) individual visits data (originating “Checks” dataset). function uses summary checks data, highly recommend running series estimation functions provided package estimate summary dates specifically provided participant (see: nw.estclutchsize(), nw.estfirstlay(), nw.esthatch(), nw.estfledge()). Running theses estimations can increase amount information available phenologic filtering. function, small user-created dataframe following format needed. values represent maximum allowable number days nest particular species can nesting stage. “Total” refers number days spanning initiation nest building though fledging. example continue using use NestWatch data Bewick’s Wren Carolina Wren:   function also logical argument trim_to_active. argument specifies nest checks nest active (building activity, observed eggs, observed young) nest fledge/failure noted flagging removal. setting argument TRUE, individual nest checks outside active period removed mode = \"remove\" noted \"FLAGGED\" tag new Flagged.Check column manually inspect. can visualize distribution active nesting periods Carolina Wrens example filtered trimmed.  can see nests long nesting periods filtering. filtering 448 attempts deemed “long”, left 2,539 attempts continue analysis .","code":"## 1. Load, Clean, & Estimate Data   # Load the supplied `wrens` dataset data <- nestwatchR::wren_quickstart length(unique(data$Attempt.ID)) #> [1] 7626 # > [1] 7626      # number of nesting attempts for Bewick's and Carolina Wren  # Run cleaning function  nw.cleandata(data = data,               mode = \"remove\",               methods = c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"),              output = \"data\")  # Run summary date estimation functions # Create average phenological dates df by species avg_phen <- data.frame(Species = c(\"bewwre\", \"carwre\"),                        Clutch.Size  = c(5, 4),                        Eggs.per.Day = c(1, 1),                        Incubation   = c(16, 16),                        Nestling     = c(16, 13))  nw.estclutchsize(data = data, output = \"data\") nw.estfirstlay(data = data, phenology = avg_phen, output = \"data\") nw.esthatch(data = data, phenology = avg_phen, output = \"data\") nw.estfledge(data = data, phenology = avg_phen, output = \"data\") ## 2. Filter Data using Max Phenologies  # Create simple df with maximum allowable # days in each nest phase for Bewick's and Carolina Wrens # You can provide data for a single species or multiple species to be run at the same time: max_days <-    data.frame(species =  c(\"bewwre\", \"carwre\"),              lay = c(8, 6),           # here we chose max recorded clutch size              incubation = c(20, 20),  # here means plus a bit of buffer              nestling = c(20, 20),    # here means plus a bit of buffer              total = c(60, 55))       # here means (build-to-fledge, plus a bit of buffer)  # Filter attempts based on nesting phenology nw.filterphenology(data = data,                    mode = \"flag\",                     max_phenology = max_days,                     trim_to_active = TRUE,                    output = \"flagged_phenology\")   # How many attempts were flagged? flagged <- flagged_phenology %>% filter(Flagged.Attempt == \"FLAGGED\") length(unique(flagged$Attempt.ID)) #> [1] 448 # > [1] 448       # number of attempts which were flagged  # How many checks were flagged? flagged <- flagged_phenology %>% filter(Flagged.Check == \"FLAGGED\") length(unique(flagged$Attempt.ID)) #> [1] 769 # > [1] 769       # number of checks which were flagged # Calculate the unfiltered date span of each nest unfiltered <- data %>% filter(Species.Code == \"carwre\") %>%                         group_by(Attempt.ID) %>% arrange(Visit.Datetime) %>%                         mutate(nesting_period = as.numeric(                             max(Visit.Datetime) - min(Visit.Datetime)))  # date span  # Filter the data from phenology flags, calculate filtered date spans filtered <- flagged_phenology %>% group_by(Attempt.ID) %>% arrange(Visit.Datetime) %>%                                    filter(Species.Code == \"carwre\") %>%                                    filter(is.na(Flagged.Attempt)) %>%                                    filter(is.na(Flagged.Check)) %>%                                    mutate(nesting_period = as.numeric(max(Visit.Datetime) - min(Visit.Datetime)))  # Visualize filtered vs unfiltered date spans library(ggplot2) ggplot() +   geom_histogram(data = unfiltered, aes(x = nesting_period, fill = \"Unfiltered\"), color = \"#69A0C2\") +   geom_histogram(data = filtered, aes(x = nesting_period, fill = \"Filtered\"), color = \"grey90\", alpha = 0.5) +   scale_fill_manual(values = c(\"Unfiltered\" = \"#457999\", \"Filtered\" = \"#8DCA8B\"), name = \"Dataset\") +   xlim(0, 250) +    xlab(\"Carolina Wren Nesting Periods\") +   ylab(\"Count\") +   geom_vline(xintercept = 55, linetype = \"dashed\", linewidth = 2, color = \"black\") +   annotate(\"text\", x = 85, y = 4500, label = \"55 day limit\", color = \"black\", vjust = -0.5) +   theme_minimal()"},{"path":"https://engagement-center.github.io/nestwatchR/articles/d_Data-Estimation.html","id":"estimate-clutch-size","dir":"Articles","previous_headings":"","what":"Estimate Clutch Size","title":"Estimate NestWatch Summary Dates","text":"Clutch size common omission NestWatch dataset. nw.estclutchsize() takes merged NestWatch dataframe data =, optional output = argument rename resulting dataframe. function looks data contained several columns estimate clutch size nest . NestWatch participants usually visit nest daily record data fields every visit, data needed estimate clutch size may spread many columns nest visits section. function looks, Attempt.ID, nest visits summary data finds (1) maximum egg count, (2) unhatched eggs count, (3) maximum young count (dead + alive), (4) number fledglings recorded. summaries, function calculates maximum number (nest check) observed (1) host eggs, (2) young (alive/dead) + unhatched eggs, (3) fledged + unhatched eggs, get maximum contents nest nest stage (lay/incubation, nestling, fledging). Depending data available, certainty clutch size estimate may vary, cases, may estimatable. instance, successful nest 4 eggs recorded several checks 4 fledged young observed high certainty clutch size 4. However, nest observed 2 eggs one check week later found depredated, certainty clutch size known. case, clutch size estimated 2, may higher depending exact (unobserved) failure date.","code":"# Load wrens example data wrens <- nestwatchR::wren_quickstart length(unique(wrens$Attempt.ID)) # > [1] 7626    # total attempts in wrens  # How many attempts have missing clutch sizes? empty_clutchsize <- wrens %>% filter(is.na(Clutch.Size)) length(unique(empty_clutchsize$Attempt.ID)) # > [1] 2228    # number of NA clutch sizes  # Run estclutchsize nw.estclutchsize(data = wrens, output = \"estimated.clutch\") still_empty <- estimated.clutch %>% filter(is.na(Clutch.Size)) length(unique(still_empty$Attempt.ID)) # > [1] 376     # number of clutch sizes not estimated"},{"path":"https://engagement-center.github.io/nestwatchR/articles/d_Data-Estimation.html","id":"estimate-first-lay-date","dir":"Articles","previous_headings":"","what":"Estimate First Lay Date","title":"Estimate NestWatch Summary Dates","text":"First lay dates can estimated well nest visited egg-laying phase. function nw.estfirstlay() can help identify attempts enough data estimate lay dates. function takes merged NestWatch dataframe data =, user-provided average nest phenology dataframe (phenology =, see details), optional output = argument rename resulting dataframe. function uses data spread across several data fields within NestWatch dataset estimate lay date first egg attempt’s clutch. order, function determines (1) nest visited egg-laying phase, (2) attempt hatch date, (3) nest fledge date. checking order, function estimates lay date proximal event date. nest visited laying, estimated lay date likely precise estimated fledge date (can variation incubation nestling timeframes). counting backwards time proximal event appropriate nest phases, can estimate first lay dates. timeframe events (laying, incubation, nestling, fledging), varies species may vary due variables like latitude. account , function takes required phenology = argument, user-provided dataframe expected, average species-level nest phenology data (use mean, median, mode number days, whichever relevant study): example, can input phenological data multiple species estimate first lay dates .","code":"phenology <- data.frame(Species = c(\"bewwre\", \"carwre\"),                         Clutch.Size  = c(5, 4),                         Eggs.per.Day = c(1, 1),                         Incubation   = c(16, 16),                         Nestling     = c(16, 13))  DT::datatable(phenology, options = list(paging = F, scrollX = T, searching  = F)) # Reuse `estimated.clutch` data from above length(unique(estimated.clutch$Attempt.ID)) # > [1] 7626    # total attempts in estimated.clutch  # How many attempts have missing first lay dates? empty_firstlay <- estimated.clutch %>% filter(is.na(First.Lay.Date)) length(unique(empty_firstlay$Attempt.ID)) # > [1] 3008    # number of NA first lay dates  # Run estfirstlay nw.estfirstlay(data = estimated.clutch, phenology = phenology, output = \"estimated.lay\") still_empty <- estimated.lay %>% filter(is.na(First.Lay.Date)) length(unique(still_empty$Attempt.ID)) # > [1] 2392     # number of first lay dates not estimated"},{"path":"https://engagement-center.github.io/nestwatchR/articles/d_Data-Estimation.html","id":"estimate-hatch-date","dir":"Articles","previous_headings":"","what":"Estimate Hatch Date","title":"Estimate NestWatch Summary Dates","text":"nesting attempts young known hatched, hatch dates may estimatable first lay date fledge date known. function nw.esthatch() takes merged NestWatch dataframe data =, user-provided, average nest phenology dataframe (phenology =, see details), optional output = argument rename resulting dataframe. function checks, order, (1) Young.Total recorded nest fledged (positive indication hatching), (2) hatch date available, finally (3) known (non-estimated) fledge date available. requirements met, function uses user-input nest phenology time frames estimate hatch date date. Estimated dates denoted 1 data$Hatch.Date.Estimated. NestWatch data field specific nestling age, rather categorical nestling age score (.e.”naked young”, “partially feathered young”). Due uncertainty day-age score species possibly observers, function utilize data.","code":"# Reuse `estimated.lay` data from above length(unique(estimated.lay$Attempt.ID)) # > [1] 7626    # total attempts in estimated.lay  # How many attempts have missing hatch dates? empty_hatch <- estimated.lay %>% filter(is.na(Hatch.Date)) length(unique(empty_hatch$Attempt.ID)) # > [1] 3680    # number of NA hatch dates  # Run esthatch nw.esthatch(data = estimated.lay, phenology = phenology, output = \"estimated.hatch\") still_empty <- estimated.hatch %>% filter(is.na(Hatch.Date)) length(unique(still_empty$Attempt.ID)) # > [1] 3207     # number of hatch dates not estimated"},{"path":"https://engagement-center.github.io/nestwatchR/articles/d_Data-Estimation.html","id":"estimate-fledge-date","dir":"Articles","previous_headings":"","what":"Estimate Fledge Date","title":"Estimate NestWatch Summary Dates","text":"nesting attempts young known fledged, hatch dates may estimatable hatch date first lay date known. function nw.estfledge(), like estimation functions , takes merged NestWatch dataframe data =, user-provided, average nest phenology dataframe (phenology =, see details), optional output = argument rename resulting dataframe. function checks, order, (1) nest fledged successfully, (2) Hatch.Date recorded (3) First.Lay.Date recorded. requirements met, function uses user-input nest phenology time frames estimate fledge date. Estimated dates denoted 1 data$Fledge.Date.Estimated.","code":"# Reuse `estimated.hatch` data from above length(unique(estimated.hatch$Attempt.ID)) # > [1] 7626    # total attempts in estimated.hatch  # How many attempts have missing fledge dates? empty_fledge <- estimated.hatch %>% filter(is.na(Fledge.Date)) length(unique(empty_fledge$Attempt.ID)) # > [1] 3779    # number of NA fledge dates  # Run estfledge nw.estfledge(data = estimated.hatch, phenology = phenology, output = \"estimated.fledge\") still_empty <- estimated.fledge %>% filter(is.na(Fledge.Date)) length(unique(still_empty$Attempt.ID)) # > [1] 3483     # number of fledge dates not estimated"},{"path":"https://engagement-center.github.io/nestwatchR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kim Savides. Author, maintainer. Robyn Bailey. Author. David Bonter. Author. Cornell Lab Ornithology. Copyright holder.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Savides K, Bailey R, Bonter D (2025). nestwatchR: Download, Clean, Filter NestWatch Data. R package version 0.0.100, https://engagement-center.github.io/nestwatchR.","code":"@Manual{,   title = {nestwatchR: Download, Clean, and Filter NestWatch Data},   author = {Kim Savides and Robyn Bailey and David Bonter},   year = {2025},   note = {R package version 0.0.100},   url = {https://engagement-center.github.io/nestwatchR}, }"},{"path":[]},{"path":"https://engagement-center.github.io/nestwatchR/index.html","id":"development-tasks-construction","dir":"","previous_headings":"","what":"Development Tasks 🚧","title":"Download, Clean, and Filter NestWatch Data","text":"repository early development plans add additional functions create R package facilitate accessibility. 🔲 Internal testing","code":""},{"path":"https://engagement-center.github.io/nestwatchR/index.html","id":"overview-pushpin","dir":"","previous_headings":"","what":"Overview 📌","title":"Download, Clean, and Filter NestWatch Data","text":"NestWatch community science project operated Cornell Lab Ornithology. Since 1965, members public following standardized protocol observing reporting birds’ nests United States Canada (recently, globally). dataset contains raw nest records submitted NestWatch. dataset contains millions nest check observations hundreds thousands nest attempts. purpose repository provide collection functions aid accessing analyzing wealth nesting data contained NestWatch database. metadata paper associated dataset (Bailey et al. 2023) critical understanding interpreting data fields contents. dataset scheduled updates annually January 31. Relevant details can also found NestWatch website .","code":""},{"path":"https://engagement-center.github.io/nestwatchR/index.html","id":"installation-computer","dir":"","previous_headings":"","what":"Installation 💻","title":"Download, Clean, and Filter NestWatch Data","text":"package active development likely bugs unexpected issues. Presently, package exists -CRAN public engagement-center/nestwatchR GitHub repository. install package local machine, either run following code: package primarily uses R programming language, knowledge R necessary using products. function collection also depends program Python, needs installed machine prior using function. prior knowledge Python manual setup program needed. check Python installed machine run following code chunk:","code":"if (!requireNamespace(\"remotes\", quietly = TRUE)) {   install.packages(\"remotes\") }  # Install nestwatchR package in R remotes::install_github(\"engagement-center/nestwatchR\") install_status <- nzchar(Sys.which(\"python\")) if(isTRUE(install_status)){   print(\"Python is installed.\") } else {   print(\"Python is not installed. Please go to <https://www.python.org/downloads/> to install Python.\") }"},{"path":"https://engagement-center.github.io/nestwatchR/index.html","id":"data-access-globe_with_meridians","dir":"","previous_headings":"","what":"Data access 🌐","title":"Download, Clean, and Filter NestWatch Data","text":"Data NestWatch free access either nw.getdata() function R direct download Mendeley Data Archive NestWatch website. NestWatch Open Dataset Cornell Lab Ornithology licensed CC -NC 4.0. encourage researchers seeking conduct formal analyses use data. dataset, knowing data structure, understanding metadata, grasping data collection protocols, aware unique aspects program critical conducting analyses interpreting results ways provide meaningful insights. Prior analysis, encourage users NestWatch Data read article “Download Raw NestWatch Data Analysis” article website.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/index.html","id":"versions-memo","dir":"","previous_headings":"","what":"Versions 📝","title":"Download, Clean, and Filter NestWatch Data","text":"package Version 0.0 updated maintain functionality improve accessibility NestWatch datasets. encounter issues using package, can submit issue GitHub contact us directly. NestWatch Open Dataset updated annually, around 31 January, previous year’s nesting records. NestWatch also updates database historical nest records archived projects. improve reproducibility NestWatch analyses, version dataset archived Mendeley, specific version can downloaded either using nw.getdata(version = ) function direct download Mendeley archive.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/index.html","id":"citation-book","dir":"","previous_headings":"","what":"Citation 📖","title":"Download, Clean, and Filter NestWatch Data","text":"use NestWatch Open Dataset R package, please cite: Dataset (replace appropriate version # year): Bailey, R., L. Larson, D. Bonter. 2025. “NestWatch Open Dataset.” Mendeley Data, V3. doi: 10.17632/wjf794z7gc Data Paper: Bailey, R. L., L. Larson, D. N. Bonter. 2024. “NestWatch: Open-Access, Long-Term Data Set Avian Reproductive Success.” Ecology 105(2): e4230. https://doi.org/10.1002/ecy.4230 NestWatch R Package (replace appropriate version # year): Savides, K., R. Bailey, & D. Bonter. 2025. NestWatch Data Products (Version 0.00.00) [Computer software]. https://github.com/engagement-center/2024-NestWatch-Package-Internal","code":""},{"path":"https://engagement-center.github.io/nestwatchR/index.html","id":"vignettes-books","dir":"","previous_headings":"","what":"Vignettes 📚","title":"Download, Clean, and Filter NestWatch Data","text":"full function documentation, including series vignettes covering introductory usage NestWatch data, please see following Vignettes: Introduction NestWatch Data Data Access: covers data access, available data products, introduction structure format data files Conduct Common NestWatch Data Cleaning Procedures: demonstrates use variety common data cleaning procedures designed NestWatch data Filter NestWatch Data Finer Scales: demonstrates use species-level data filters functions estimate missing values Estimate NestWatch Summary Dates: demonstrates functions estimate missing summary values","code":""},{"path":"https://engagement-center.github.io/nestwatchR/index.html","id":"quick-start-ledger","dir":"","previous_headings":"","what":"Quick Start 📒","title":"Download, Clean, and Filter NestWatch Data","text":"quick start guide shows download data plot first lay dates two species NestWatch Open Dataset: Carolina Bewick’s wrens.","code":"# Load NestWatch Package library(nestwatchR) library(dplyr)  # Download NestWatch dataset by version nw.getdata(version = 2) # nw.getdata()  # no argument will default to downloading the latest version   # Merge the Attempts and Checks files nw.mergedata(attempts = NW.attempts, checks = NW.checks, output = \"merged.data\") nrow(merged.data) #>  [1] 2639824  # Filter the dataset to include just Carolina and Bewick's wrens wrens <- merged.data %>% filter(Species.Code %in% c(\"carwre\", \"bewwre\")) nrow(wrens) #>  [1] 40290 glimpse(wrens) #> Rows: 40,290 #> Columns: 54 #> $ Attempt.ID                                  <chr> \"A1000045\", \"A1000045\", \"A… #> $ Location.ID                                 <chr> \"L56654\", \"L56654\", \"L1268… #> $ Latitude                                    <dbl> 34.68472, 34.68472, 30.614… #> $ Longitude                                   <dbl> -98.40583, -98.40583, -98.… #> $ Subnational.Code                            <chr> \"US-OK\", \"US-OK\", \"US-TX\",… #> $ Species.Name                                <chr> \"Carolina Wren\", \"Carolina… #> $ Species.Code                                <chr> \"carwre\", \"carwre\", \"bewwr… #> $ Year                                        <dbl> 2006, 2006, 2006, 2006, 20… #> $ Elevation.m                                 <dbl> 344.7000, 344.7000, 316.40… #> $ Height.m                                    <dbl> 1.6002, 1.6002, 1.6154, 1.… #> $ Substrate                                   <chr> \"nesbox\", \"nesbox\", \"nesbo… #> $ Substrate.Relationship                      <chr> \"in\", \"in\", \"in\", \"in\", \"i… #> $ Substrate.Other.Description                 <chr> NA, NA, NA, NA, NA, NA, NA… #> $ Predator.Guard                              <chr> NA, NA, \"baffle\", \"baffle\"… #> $ Predator.Guard.Other                        <chr> NA, NA, NA, NA, NA, NA, NA… #> $ Cavity.Entrance.Diameter.cm                 <dbl> 3.810, 3.810, 3.810, 3.810… #> $ Entrance.Orientation                        <chr> \"ne\", \"ne\", \"sw\", \"sw\", \"s… #> $ Habitat.1m                                  <chr> NA, NA, NA, NA, NA, NA, NA… #> $ Habitat.100m                                <chr> NA, NA, NA, NA, NA, NA, NA… #> $ Location.Entry.Technique                    <chr> \"BIRDHOUSE_HIST:SELF\", \"BI… #> $ Observer.ID                                 <chr> \"obsr1309\", \"obsr1309\", \"o… #> $ First.Lay.Date                              <date> NA, NA, NA, NA, NA, NA, N… #> $ First.Lay.Date.Estimated                    <dbl> NA, NA, NA, NA, NA, NA, NA… #> $ Visited.During.Egg.Laying                   <dbl> NA, NA, NA, NA, NA, NA, NA… #> $ Hatch.Date                                  <date> NA, NA, NA, NA, NA, NA, N… #> $ Hatch.Date.Estimated                        <dbl> NA, NA, NA, NA, NA, NA, NA… #> $ Fledge.Date                                 <date> NA, NA, NA, NA, NA, NA, N… #> $ Fledge.Date.Estimated                       <dbl> NA, NA, NA, NA, NA, NA, NA… #> $ Young.Fledged                               <dbl> NA, NA, NA, NA, NA, NA, NA… #> $ Clutch.Size                                 <dbl> NA, NA, NA, NA, NA, NA, NA… #> $ Young.Total                                 <dbl> NA, NA, NA, NA, NA, NA, NA… #> $ Unhatched.Eggs                              <dbl> NA, NA, NA, NA, NA, NA, NA… #> $ Outcome                                     <chr> \"f\", \"f\", \"f6\", \"f6\", \"f6\"… #> $ Attempt.Entry.Technique                     <chr> NA, NA, NA, NA, NA, NA, NA… #> $ Visit.ID                                    <chr> \"S2489482\", \"S2489483\", \"S… #> $ Visit.Datetime                              <dttm> 2006-07-10, 2006-08-08, 2… #> $ Visit.Time.Valid                            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ Nest.Status                                 <chr> NA, NA, \"in\", \"cn\", NA, NA… #> $ Adult.Activity                              <chr> NA, \"no\", NA, NA, NA, NA, … #> $ Young.Status                                <chr> NA, NA, NA, NA, NA, NA, NA… #> $ Management.Status                           <chr> NA, \"nm\", NA, NA, NA, NA, … #> $ Host.Eggs.Count                             <dbl> 5, NA, NA, NA, 4, 6, 1, 1,… #> $ Host.Eggs.Present.Uncounted                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ Live.Host.Young.Count                       <dbl> NA, NA, NA, NA, NA, NA, NA… #> $ Live.Host.Young.Present.Uncounted           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ Dead.Host.Young.Count                       <dbl> NA, NA, NA, NA, NA, NA, NA… #> $ Dead.Host.Young.Present.Uncounted           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ Brood.Parasite.Eggs.Count                   <dbl> NA, NA, NA, NA, NA, NA, NA… #> $ Brood.Parasite.Eggs.Present.Uncounted       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ Brood.Parasite.Live.Young.Count             <dbl> NA, NA, NA, NA, NA, NA, NA… #> $ Brood.Parasite.Live.Young.Present.Uncounted <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ Brood.Parasite.Dead.Young.Count             <dbl> NA, NA, NA, NA, NA, NA, NA… #> $ Brood.Parasite.Dead.Young.Present.Uncounted <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ Visit.Entry.Technique                       <chr> NA, NA, NA, NA, NA, NA, NA… library(ggplot2)  # Format First.Lay.Date as a date wrens$First.Lay.Date <- as.Date(wrens$First.Lay.Date)  # Filter out NA values of First Lay Date, force all attempt years to 2024 for visualization data <- wrens %>% filter(!is.na(First.Lay.Date)) %>%                    mutate(First.Lay.Date = as.Date(paste0(\"2024-\", format(First.Lay.Date, \"%m-%d\"))))    # Plot the data in ggplot ggplot(data, aes(x = First.Lay.Date, fill = Species.Name, color = Species.Name)) +   geom_histogram(binwidth = 7, position = \"stack\") +    scale_fill_manual(values = c(\"#457999\", \"#8DCA8B\"), name = \"Species\") + # fill colors   scale_color_manual(values = c(\"#69A0C2\", \"grey85\")) +  # Outline colors   labs(x = \"First Lay Date\", y = \"Nest Count\", title = \"First Lay Date by Species\") +   scale_x_date( # display nice month labels     breaks = seq(as.Date(\"2024-02-01\"), as.Date(\"2024-08-01\"), by = \"month\"),     labels = c(\"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\")) +   theme_minimal() +   guides(color = \"none\") # simplify legend"},{"path":"https://engagement-center.github.io/nestwatchR/reference/exNWattempts.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample NestWatch Attempts Dataframe for Examples — exNWattempts","title":"Sample NestWatch Attempts Dataframe for Examples — exNWattempts","text":"random set 10 nesting attempts NewstWatch database use used running R documentation exmaples.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/exNWattempts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample NestWatch Attempts Dataframe for Examples — exNWattempts","text":"","code":"exNWattempts"},{"path":"https://engagement-center.github.io/nestwatchR/reference/exNWattempts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample NestWatch Attempts Dataframe for Examples — exNWattempts","text":"dataframe 10 observations 32 variables. See <https://doi.org/10.1002/ecy.4230> details variables.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/exNWchecks.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample NestWatch Checks Dataframe for Examples — exNWchecks","title":"Sample NestWatch Checks Dataframe for Examples — exNWchecks","text":"random set 10 nesting attempts NewstWatch database use running R documentation examples.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/exNWchecks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample NestWatch Checks Dataframe for Examples — exNWchecks","text":"","code":"exNWchecks"},{"path":"https://engagement-center.github.io/nestwatchR/reference/exNWchecks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample NestWatch Checks Dataframe for Examples — exNWchecks","text":"dataframe 79 observations 21 variables. See <https://doi.org/10.1002/ecy.4230> details variables.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.cleandata.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Common Cleaning Procedures to NestWatch Data — nw.cleandata","title":"Perform Common Cleaning Procedures to NestWatch Data — nw.cleandata","text":"NestWatch data collected volunteer participants (researchers & public) known contain errors. function provides several common procedures NestWatch staff identified help user clean NestWatch data analysis. user consider research objectives/species life histories read full documentation vignette.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.cleandata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Common Cleaning Procedures to NestWatch Data — nw.cleandata","text":"","code":"nw.cleandata(data, mode, methods, output = NULL)"},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.cleandata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Common Cleaning Procedures to NestWatch Data — nw.cleandata","text":"data dataframe; dataframe containing NestWatch data. mode \"flag\" \"remove\"; character string defining user wants identified nesting attempts flagged \"FLAGGED\" new column. removed dataset. methods character vector; vector containing letters :k (case- order-sensitive), identifying cleaning procedure conducted data. See Details vignette details procedure. output character; optional character string custom name output dataframe.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.cleandata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Common Cleaning Procedures to NestWatch Data — nw.cleandata","text":"dataframe","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.cleandata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform Common Cleaning Procedures to NestWatch Data — nw.cleandata","text":"NestWatch data database considered \"raw\" user consider system research objectives deciding cleaning procedures conduct. function contains 11 cleaning procedures :k. Cleaning Procedure Details: : Flag/remove attempts Species.Name \"Brown-headed Cowbird\" nest parasites        create nests. correct interpretation nest species. Users may choose look data        closely investigating brood parasitism. b: Flag/remove attempts  \"breeding behavior observed\" (u3), \"inactive\" (),        \"monitored\" (n). data likely represent nests nest boxes never received eggs unmonitored. Users may choose        include data looking habitat location data without measures phenology success. c: Flag/remove attempts Outcome “invasive species management” (f5). attempts, participant        chose remove/alter eggs nests invasive species. user interested analyzing participants’ habits invasive species        management using data fields (e.g., clutch size, first lay date), might consider skipping method        understanding outcome code interpreted “failure due human interference” standard nest survival estimates        meaningful. Note: “Invasive species management” may also incorrectly chosen participants trying indicate nest failure        caused invasive species, case still prudent flag remove records. d: Flag/remove attempts outcome failure code (f, f1, f2, f3, f6, f7) recorded fledged host young > 0.        case, participant may either characterized nest's outcome incorrectly, recorded presence fledged host young        incorrectly, mischaracterized brood parasite young host. Discerning true outcome may possible. attempt        produces number fledged host young, attempt considered successful. e: Flag/remove attempt Outcome success (s1), recorded fledged host young = 0. Inverse d. f: Flag/remove attempt # hatched host young > clutch size. may indicate incorrectly entered data long lengths time        nest checks summary data properly updated. analyst may choose review attempts looking caution        nest visit data validate hatched young clutch sizes. g: Flag/remove attempt # fledged host young > # hatched host young. Similar f. h: Flag/remove attempts NestWatch failed identify region (Subnational.Code == “XX-”).        Subnational.Code automatically assigned based coordinates supplied participant. Many attempts identified XX- likely resulted         nests located water bodies /participants entering incorrect coordinates. Consider removing “XX” attempts         coordinates implausible focal species consider inclusion analyzing coastal water-nesting species (e.g., Osprey         nesting channel markers). : Flag/remove attempts number eggs young decrease subsequently increase. may happen        nest fails new attempt started location, two individual nesting attempts. analyst        looking host response depredation events egg dumping may choose retain records. j: Flag/remove attempts impossible nesting periods. Incorrect years sometimes entered date summary fields        participants. may produce impossibly long nesting periods. account nesting phenologies hemispheres, procedure        identifies attempts (1) Fledge Date - First Lay Date > 365 days, (2) Hatch Date - First Lay Date > 84 days, (3) Fledge Date         - Hatch Date > 300 days. dates represent maximum nest phenological period bird species realistic        majority NestWatch dataset. encourage users determine reasonable phenologies species interest use        nw.filterphenology run finer filter nest phenology dates species. k: Flag/remove attempts # days first last visit > 365 days year summary        dates (Lay, Hatch, Fledge) overlap year nest checks data. Additional check identify nest attempts year portion        dates nest visits likely incorrectly entered. analyst may choose review attempts individually verify typo occurred.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.cleandata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Common Cleaning Procedures to NestWatch Data — nw.cleandata","text":"","code":"# Load example wren data wrens <- nestwatchR::wren_quickstart  # Flag data not meeting procedures e, f, g, and h nw.cleandata(data = wrens, mode = \"flag\",              methods = c(\"e\", \"f\", \"g\", \"h\")) #> ... Beginning to identify nesting attempts that do not meet the criteria. This may take a minute ... #> ... Identified nesting attempts have been noted with 'FLAGGED' in the new column 'Flagged.Attempt'.  # Remove data not meeting procedures j or k. nw.cleandata(data = wrens, mode = \"remove\",              methods = c(\"j\", \"k\")) #> ... Beginning to identify nesting attempts that do not meet the criteria. This may take a minute ... #> ... Identified nesting attempts have been removed from the new dataset."},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.cleantaxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Cleaning Actions on Species Names & Codes — nw.cleantaxa","title":"Perform Cleaning Actions on Species Names & Codes — nw.cleantaxa","text":"function can optionally remove attempts species identified hybrids, \"spuhs\", \"slashes\"  preform \"taxonomic roll \" subspecies species level.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.cleantaxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Cleaning Actions on Species Names & Codes — nw.cleantaxa","text":"","code":"nw.cleantaxa(   data,   spuh = FALSE,   slash = FALSE,   hybrid = FALSE,   rollsubspecies = FALSE,   output = NULL )"},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.cleantaxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Cleaning Actions on Species Names & Codes — nw.cleantaxa","text":"data dataframe; dataframe containing NestWatch data. spuh logical; attempt \"sp.\" removed? NULL, default, retains identified rows output dataframe. TRUE, removes identified rows output dataframe. FALSE, retains identified rows output dataframe. slash logical; attempt \"/\" removed? NULL, default, retains identified rows output dataframe. TRUE, removes identified rows output dataframe. FALSE, retains identified rows output dataframe. hybrid logical; attempt \"(hybrid)\" removed? NULL, default, retains identified rows output dataframe. TRUE, removes identified rows output dataframe. FALSE, retains identified rows output dataframe. rollsubspecies logical; attempt Species.Name form \"species (subspecies/form) rolled species level? Uses current eBird taxonomy auk::ebird_taxonomy. NULL, default, retains original Species.Names Species.Codes. TRUE, preforms taxonomic roll attempts subspecies/form designation updates Species.Code. FALSE, retains original Species.Names Species.Codes. output character; optional character string custom name output dataframe","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.cleantaxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Cleaning Actions on Species Names & Codes — nw.cleantaxa","text":"dataframe","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.cleantaxa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform Cleaning Actions on Species Names & Codes — nw.cleantaxa","text":"NestWatch platform uses eBird taxonomy help users auto-complete species names. allows users select available eBird taxonomic unit, including spuhs (ie. \"chickadee sp.\"), slashes (ie. \"Tree/Violet-green Swallow\"), subspecies/forms (ie.\"House Wren (northern)\"). cases, user may decide omit spuhs slashes species known certainty. user may want analyze subspecies/forms species together differentiations biologically relevant analysis. function update Common Name Species Code attempt according current version eBird taxonomy auk::ebird_taxonomy.","code":""},{"path":[]},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.cleantaxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Cleaning Actions on Species Names & Codes — nw.cleantaxa","text":"","code":"# Data with species name variations df <- data.frame(Attempt.ID = c(1, 1, 2, 3, 4),                  Species.Name = c(\"House Wren (northern)\", \"House Wren (northern)\",                                  \"chickadee sp.\", \"Tree/Violet-green Swallow\",                                  \"Mallard x American Black Duck (hybrid)\"),                 Species.Code = c(\"houwre1\", \"houwre1\", \"chicka1\", \"y00701\", \"x00004\"))  # Remove just \".sp\" attempts nw.cleantaxa(df, spuh = TRUE)  # Remove \"/\" and hybrid attempts, roll up subspecies to species nw.cleantaxa(df, slash = TRUE, hybrid = TRUE, rollsubspecies = TRUE)"},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estclutchsize.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Missing Summary Clutch Size Values in NestWatch Data — nw.estclutchsize","title":"Estimate Missing Summary Clutch Size Values in NestWatch Data — nw.estclutchsize","text":"Clutch size important value estimating nest dates determining successfulness nest. NestWatch participants may forget enter clutch size nest attempt's summary data. clutch size information may estimated data individual nest visits. function used available data entered nest visits estimate maximum host egg count (clutch size).","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estclutchsize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Missing Summary Clutch Size Values in NestWatch Data — nw.estclutchsize","text":"","code":"nw.estclutchsize(data, output = NULL)"},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estclutchsize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Missing Summary Clutch Size Values in NestWatch Data — nw.estclutchsize","text":"data dataframe; dataframe containing merged NestWatch attempts visits data. output character; optional character vector rename resulting output.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estclutchsize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Missing Summary Clutch Size Values in NestWatch Data — nw.estclutchsize","text":"dataframe; dataframe additional binary column Clutch.Szie.Estimated 1 denotes clutch size estimated function 0 denotes clutch size provided participant.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estclutchsize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Missing Summary Clutch Size Values in NestWatch Data — nw.estclutchsize","text":"function looks data contained several columns estimate clutch size nest . NestWatch participants necessarily visit nest everyday record data fields every visit data needed estimate clutch size may spread many columns. Depending data available, certainty clutch size estimate may vary, cases, may estimable. instance, successful nest 4 eggs recorded several checks 4 fledged young observed high certainty clutch size 4. However, nest observed 2 eggs one check week later found predated, certainty clutch size known. case clutch size estimated 2 may higher depending exact (unobserved) failure date.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estclutchsize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Missing Summary Clutch Size Values in NestWatch Data — nw.estclutchsize","text":"","code":"# Example simplified NestWatch dataset: data <- data.frame(Attempt.ID = c(1, 2, 3, 4, 5, 6),                    Visit.ID = c(1, 2, 3, 4, 5, 6),                    Clutch.Size = c(1, NA, NA, NA, NA, NA),                    Host.Eggs.Count = c(1, 2,  NA, NA, NA, 3),                    Young.Total = c(1, 2, 3, 3, 4, NA),                    Live.Host.Young.Count = c(1, 1, 2, 3, 1, 1),                    Unhatched.Eggs = c(0, 0, NA, NA, 1, 3),                    Young.Fledged = c(1, 0, NA, NA, 1, 3),                    Dead.Host.Young.Count = c(0, NA, NA, 1, 0,1))  # Estimate Clutch Sizes if NA nw.estclutchsize(data = data, output = \"out\")  out$Clutch.Size   # clutch size values #> [1] 1 2 3 4 5 6 out$Clutch.Size.Estimated   # binary indicator if clutch size value is estimated or not #> [1] 0 1 1 1 1 1"},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estfirstlay.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate First Lay Date for NestWatch Data — nw.estfirstlay","title":"Estimate First Lay Date for NestWatch Data — nw.estfirstlay","text":"First Lay Date data important investigating changes nesting phenology time. data NestWatch dataset provided participants, input dates may overlooked participants. explicitly provided participant, first lay date may estimated based Hatch Date, Fledge Date, nest visited eggs still laid. function checks, order, nest visited egg laying, hatch date, fledge date. , uses user-input nest phenology timeframes estimate first lay date. Estimated dates denoted 1 data$First.Lay.Date.Estimated.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estfirstlay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate First Lay Date for NestWatch Data — nw.estfirstlay","text":"","code":"nw.estfirstlay(data, phenology, output = NULL)"},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estfirstlay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate First Lay Date for NestWatch Data — nw.estfirstlay","text":"data dataframe; dataframe containing merged NestWatch attempts visits data. phenology dataframe; dataframe one row phenological data species estimated. Data columns follows: Species: Species Codes species estimated. Clutch.Size: Average clutch size species. Eggs.per.Day: Average number eggs laid per day species. Incubation: Average number days spent incubation (days clutch complete hatch). Nestling: Average number days spent nestling period (days hatch fledge). output character; optional character string custom name output dataframe","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estfirstlay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate First Lay Date for NestWatch Data — nw.estfirstlay","text":"dataframe","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estfirstlay.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate First Lay Date for NestWatch Data — nw.estfirstlay","text":"Precision first lay date estimates depend data used estimate values . function estimates based egg counts observed lay first, followed hatch date, fledge date. First lay dates likely high precision based known egg dates, less variability eggs laid per day number incubation days number days fledge (can vary individual, latitude, climate, factors).","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estfirstlay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate First Lay Date for NestWatch Data — nw.estfirstlay","text":"","code":"# Simplified NestWatch dataset with missing data # All hatch dates should be estimated to be 2024-05-01 data <- data.frame(Attempt.ID = c(1, 2, 3, 3),   Species.Code = rep(\"carwre\", 4),   Visited.During.Egg.Laying = c(0, 0, NA, NA),   First.Lay.Date = as.Date(rep(NA, 4)),   Hatch.Date = as.Date(c(\"2024-05-20\", NA, NA, NA)),   Fledge.Date = as.Date(c(NA, \"2024-06-02\", NA, NA)),   Clutch.Size = c(4, 4, NA, NA),   Visit.Datetime = as.Date(c(\"2024-05-19\", \"2024-06-01\", \"2024-05-02\", \"2024-05-15\")),   Host.Eggs.Count = c(0, 0, 2, 4))  # Create phenology dataframe phen <- data.frame(Species = c(\"carwre\"),                    Clutch.Size  = c(4),                    Eggs.per.Day = c(1),                    Incubation   = c(16),                    Nestling     = c(13))  # Run function nw.estfirstlay(data = data, phenology = phen, output = \"estimated.lay\") all(estimated.lay$First.Lay.Date == \"2024-05-01\") #> [1] TRUE"},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estfledge.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Fledge Date for NestWatch Data — nw.estfledge","title":"Estimate Fledge Date for NestWatch Data — nw.estfledge","text":"Fledge Date data may important investigating relationships nesting success environmental variables. data NestWatch dataset provided participants, input dates may overlooked participants. explicitly provided participant, fledge date may estimated based hatch date first lay date. function checks, order, nest fledged successfully, Hatch.Date recorded First.Lay.Date recorded. requirements met, function uses user-input nest phenology time frames estimate fledge date. Estimated dates denoted 1 data$Fledge.Date.Estimated.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estfledge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Fledge Date for NestWatch Data — nw.estfledge","text":"","code":"nw.estfledge(data, phenology, output = NULL)"},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estfledge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Fledge Date for NestWatch Data — nw.estfledge","text":"data dataframe; dataframe containing merged NestWatch attempts visits data. phenology dataframe; dataframe one row phenological data species estimated. Data columns follows: Species: Species Codes species estimated. Clutch.Size: Average clutch size species. Eggs.per.Day: Average number eggs laid per day species. Incubation: Average number days spent incubation (days clutch complete hatch). Nestling: Average number days spent nestling period (days hatch fledge). output character; optional character string custom name output dataframe","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estfledge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Fledge Date for NestWatch Data — nw.estfledge","text":"dataframe","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estfledge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Fledge Date for NestWatch Data — nw.estfledge","text":"Precision fledge date estimates depend data used estimate values (values estimated). Users consider want estimate fledge dates based estimated hatch lay dates. function estimates fledge date counting forward hatch date (available) average number nestling days (provided user). hatch date available, function estimates fledge date based first lay date, countersign forward number egg-laying-days based clutch size (available, user-provided average clutch size) eggs-per-day species.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.estfledge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Fledge Date for NestWatch Data — nw.estfledge","text":"","code":"# Simplified NestWatch data with missing data # All fledge dates if nest fledged (Outcome = s1) should be 2024-06-03 # Notem Attemp.ID \"4\" failed to fledged (outcome = \"f\"), so a fledge date is not estimated data <- data.frame(Attempt.ID = c(\"1\", \"2\", \"3\", \"4\"),                    Species.Code = rep(\"carwre\", 4),                    First.Lay.Date = as.Date(c(\"2024-05-01\", \"2024-05-02\",                                               \"2042-05-01\", \"2024-05-01\")),                    Hatch.Date = as.Date(c(\"2024-05-21\", NA, NA, \"2024-05-21\")),                    Fledge.Date = as.Date(c(NA, NA, NA, NA)),                    Fledge.Date.Estimated = c(NA, NA, NA, NA),                    Clutch.Size = c(NA, 3, 4, NA),                    Young.Total = c(4, 3, 4, 4),                    Outcome = c(\"s1\", \"s1\", \"s1\", \"f\"))  # Create phenology dataframe phenology <- data.frame(Species = c(\"carwre\"),                         Clutch.Size  = c(4),                         Eggs.per.Day = c(1),                         Incubation   = c(16),                         Nestling     = c(13))  nw.estfledge(data = data, phenology = phenology) #> ... Estimating fledge dates, this may take some time ..."},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.esthatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Hatch Date for NestWatch Data — nw.esthatch","title":"Estimate Hatch Date for NestWatch Data — nw.esthatch","text":"Hatch Date data, like first lay date important investigating changes nesting phenology success time. data NestWatch dataset provided participants, input dates may overlooked participants. explicitly provided participant, hatch date may estimated based first lay date fledge Date. function checks, order, Young.Total recorded nest fledged (positive indication hatching), hatch date available, finally known (non-estimated) fledge date available. requirements met, function uses user-input nest phenology timeframes estimate hatch date date. Estimated dates denoted 1 data$Hatch.Date.Estimated.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.esthatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Hatch Date for NestWatch Data — nw.esthatch","text":"","code":"nw.esthatch(data, phenology, output = NULL)"},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.esthatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Hatch Date for NestWatch Data — nw.esthatch","text":"data dataframe; dataframe containing merged NestWatch attempts visits data. phenology dataframe; dataframe one row phenological data species estimated. Data columns follows: Species: Species Codes species estimated. Clutch.Size: Average clutch size species. Eggs.per.Day: Average number eggs laid per day species. Incubation: Average number days spent incubation (days clutch complete hatch). Nestling: Average number days spent nestling period (days hatch fledge). output character; optional character string custom name output dataframe","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.esthatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Hatch Date for NestWatch Data — nw.esthatch","text":"dataframe","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.esthatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Hatch Date for NestWatch Data — nw.esthatch","text":"Precision hatch date estimates depend data used estimate values (values estimated). Users consider want estimate hatch dates based estimated lay dates. function estimates based first lay date available, calculates number egg-laying-days based clutch size (available, user-provided average clutch size) eggs-per-day species. lay dates available, function estimates hatch known fledge dates (Fledge.Date.Estimated == 0) subtracting user-provided nestling period length. Due uncertainly sighting aging fledged young, function estimate hatch date estimated fledge dates.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.esthatch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Hatch Date for NestWatch Data — nw.esthatch","text":"","code":"# Simplified NestWatch data with missing data # All hatch dates should be 2024-05-20 data <- data.frame(Attempt.ID = c(\"1\", \"2\", \"3\"),                    Species.Code = rep(\"carwre\", 3),                    First.Lay.Date = as.Date(c(\"2024-05-01\", \"2024-05-02\", NA)),                    Hatch.Date = as.Date(rep(NA, 3)),                    Fledge.Date = as.Date(c(NA, NA, \"2024-06-02\")),                    Fledge.Date.Estimated = c(NA, NA, 0),                    Clutch.Size = c(NA, 3, NA),                    Young.Total = c(4, 3, 4),                    Outcome = c(\"s1\", \"s1\", \"s1\"))  # Create phenology dataframe phenology <- data.frame(Species = c(\"carwre\"),                         Clutch.Size  = c(4),                         Eggs.per.Day = c(1),                         Incubation   = c(16),                         Nestling     = c(13))  # Run function nw.esthatch(data = data, phenology = phenology) #> ... Estimating hatch dates, this may take some time ..."},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.filterphenology.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Nesting Attempts Based on Expected Nest Phenological Periods — nw.filterphenology","title":"Filter Nesting Attempts Based on Expected Nest Phenological Periods — nw.filterphenology","text":"provide additional checks data quality analysis, analyst may want filter nesting attempts recorded nesting phenologies unexpectedly long lengths. function allows analyst specify species-specific values nest phenologies using expected days lay, incubation, nestling, total nesting periods. defining allowable time frames analyst can flag remove \"run-\" nest attempts nests match specie's life history.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.filterphenology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Nesting Attempts Based on Expected Nest Phenological Periods — nw.filterphenology","text":"","code":"nw.filterphenology(data, mode, max_phenology, trim_to_active, output = NULL)"},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.filterphenology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Nesting Attempts Based on Expected Nest Phenological Periods — nw.filterphenology","text":"data dataframe; dataframe merged NestWatch attempt visits data. Date columns must class Date Datetime columns must class POSIXct. mode \"flag\" \"remove\"; character string defining analyst wants identified nesting attempts flagged \"FLAGGED\" new column, removed dataset. max_phenology dataframe; simple dataframe one row species interest following column structure: Lay: number days representing maximum expected laying period species. Incubation: number days representing maximum expected incubation period (clutch complete hatch) species. Nestling: number days representing maximum expected nesting period (hatch last fledge) species. Total Nesting Period: number days representing maximum expected nesting period (spanning first initial nest building last fledge) species. trim_to_active logical; TRUE FALSE indicating nest check data trimmed include rows nest active (build, lay, incubation, presence life young). first check observing fledge fail event retained, subsequent checks targeted flag/removal. Flag/removal follows mode. output character; optional character string custom name output dataframe","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.filterphenology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Nesting Attempts Based on Expected Nest Phenological Periods — nw.filterphenology","text":"dataframe","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.filterphenology.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter Nesting Attempts Based on Expected Nest Phenological Periods — nw.filterphenology","text":"function calculates number days First.Lay.Date, Hatch.Date, Fledge.Date date values, comparing user-provided acceptable date spans nest phase. attempts contain summary dates. analyst may choose explore nw.estclutchsize, nw.estfirstlay, nw.esthatch, nw.estfledge functions estimate summary dates individual nest visit data prior using function. additional check, function calculates date span first occurrence incomplete nest, complete nest, observed egg, observed young last active date (either last observation eggs/live young first 0-egg/young count indicating fail/fledge) compares date span user-provided \"total nesting period\" value.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.filterphenology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Nesting Attempts Based on Expected Nest Phenological Periods — nw.filterphenology","text":"","code":"# Create phenology dataframe phenology <- data.frame(species = c(\"carwre\"),                         lay = c(7),          # max observed                         incubation = c(20),  # mean plus some extra                         nestling = c(20),    # mean plus some extra                         total = c(50))       # mean plus some extra   # Simplified NestWatch dataset with nest summary dates # Attempts 3 & 4 should be flagged (too long in incubation and nestling phases respectively) data <- data.frame(Attempt.ID = c(\"1\", \"2\", \"3\", \"4\"),                    Species.Code = rep(\"carwre\", 4),                    First.Lay.Date = as.Date(c(\"2024-05-01\", \"2024-05-01\",                                               \"2024-05-01\", \"2024-05-01\")),                    Hatch.Date = as.Date(c(\"2024-05-20\", \"2024-05-21\", \"2024-06-10\", \"2024-05-21\")),                    Fledge.Date = as.Date(c(\"2024-06-05\", NA, \"2024-06-25\", \"2024-06-30\")),                    Visit.Datetime = c(rep(NA, 4)),                    Outcome = c(\"s1\", \"f\", \"s1\", \"s1\"),                    Nest.Status = rep(NA, 4)) nw.filterphenology(data = data, phenology = phenology, mode = \"flag\") #> Error in nw.filterphenology(data = data, phenology = phenology, mode = \"flag\"): unused argument (phenology = phenology)   # Simplified NestWatch dataset without nest summary dates (will look at total nest attempt duration from visit dates) # Attempt \"2\" should be flagged as being too long. data <- data.frame(Attempt.ID = c(\"1\", \"1\", \"2\", \"2\"),                    Species.Code = rep(\"carwre\", 4),                    First.Lay.Date = as.Date(rep(NA, 4)),                    Hatch.Date = as.Date(rep(NA, 4)),                    Fledge.Date = as.Date(rep(NA, 4)),                    Visit.Datetime = as.POSIXct(c(\"2024-05-01\", \"2024-06-15\", \"2024-05-01\", \"2024-07-30\")),                    Outcome = c(\"s1\", \"s1\", \"s1\", \"s1\"),                    Nest.Status = rep(NA, 4)) nw.filterphenology(data = data, phenology = phenology, mode = \"flag\") #> Error in nw.filterphenology(data = data, phenology = phenology, mode = \"flag\"): unused argument (phenology = phenology)"},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.filterspatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Nest Locations by Expected Range Maps — nw.filterspatial","title":"Filter Nest Locations by Expected Range Maps — nw.filterspatial","text":"Use geospatial polygon identify remove points located outside polygon. function also includes option buffer argument can used add specific distance buffer around polygon prior filtering.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.filterspatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Nest Locations by Expected Range Maps — nw.filterspatial","text":"","code":"nw.filterspatial(   points,   polygon,   mode,   buffer = F,   buffer_units = NULL,   buffer_output = NULL,   proj = NULL,   output = NULL )"},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.filterspatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Nest Locations by Expected Range Maps — nw.filterspatial","text":"points sf; spatial feature containing point data. polygon sf; spatial polygon representing area want include datafrom. mode \"flag\" \"remove\"; character string defining user wants identified nesting attempts flagged \"FLAGGED\" new column. removed dataset. buffer numeric; Optional distance buffer around polygon buffer_units \"km\" \"mi\"; character string defining buffer distance units either kilometers miles. buffer_output logical; Optionally export generated buffered polygon global enviornment. proj PROJ.4 sting; Optional definition map projection. Defaults Lambert Conformal Conic. output character; optional character string custom name output spatial dataframe.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.filterspatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Nest Locations by Expected Range Maps — nw.filterspatial","text":"sf; spatial dataframe","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.filterspatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Nest Locations by Expected Range Maps — nw.filterspatial","text":"","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union set.seed(123)  # Define simple polygon square_coords <- matrix(c(0, 0,   # bottom-left                           1, 0,   # bottom-right                           1, 1,   # top-right                           0, 1,   # top-left                           0, 0),  # close the square back to bottom-left                         ncol = 2, byrow = TRUE)  # Create an `sf` polygon square_polygon <- sf::st_polygon(list(square_coords)) %>%                   sf::st_sfc() %>% sf::st_sf() %>%                   sf::st_set_crs(4326)  # Set a coordinate reference system (WGS84)  # Generate random points around the square, convert to sf object random_points <- data.frame(Attempt.ID = seq(1:30),                             x = runif(30, -0.5, 1.5),                             y = runif(30, -0.5, 1.5)) points_sf <- sf::st_as_sf(random_points, coords = c(\"x\", \"y\"), crs = 4326)  # Run the spatial filter nw.filterspatial(points = points_sf,                   polygon = square_polygon,                   mode = \"flag\",                   proj = \"+proj=longlat +datum=WGS84 +no_defs\",                   output = \"geofiltered.data\") #> Warning: attribute variables are assumed to be spatially constant throughout all geometries #> ... Identified nesting attempts have been noted with 'FLAGGED' in the new dataset in column 'Flagged.Location'."},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.getdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Download NestWatch Data — nw.getdata","title":"Download NestWatch Data — nw.getdata","text":"Download archived versions NestWatch database, optional control version downloaded.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.getdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download NestWatch Data — nw.getdata","text":"","code":"nw.getdata(version = NULL)"},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.getdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download NestWatch Data — nw.getdata","text":"version numeric; optional number corresponding desired dataset version. Defaults latest available version","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.getdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download NestWatch Data — nw.getdata","text":"two dataframes; `NW.attempts` containing nest-level parameters \"Attempt.ID\" `NW.checks` containing check-level information \"Attempt.ID\"s nest check data.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.getdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download NestWatch Data — nw.getdata","text":"NestWatch dataset consists two large files function might take several minutes run depending connection speed. Presently, option subset data prior download.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.getdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download NestWatch Data — nw.getdata","text":"","code":"if (FALSE) { # \\dontrun{ # Download version 1 of the data nw.getdata(version = 1)  # Download most recent version nw.getdata() } # }"},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.mergedata.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge NestWatch Datasets — nw.mergedata","title":"Merge NestWatch Datasets — nw.mergedata","text":"Merge NestWatch Datasets","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.mergedata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge NestWatch Datasets — nw.mergedata","text":"","code":"nw.mergedata(attempts, checks, output = NULL)"},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.mergedata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge NestWatch Datasets — nw.mergedata","text":"attempts dataframe; dataframe containing NestWatch nest attempts data checks dataframe; dataframe containing NestWatch nest check data output character; optional character vector custom name output dataframe","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.mergedata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge NestWatch Datasets — nw.mergedata","text":"dataframe; dataframe merged nest attempts checks unified \"Attempt.ID\"","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/nw.mergedata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge NestWatch Datasets — nw.mergedata","text":"","code":"# Load example NestWatch data ex.attempts <- nestwatchR::exNWattempts ex.checks <- nestwatchR::exNWchecks  # Merge example NestWatch datasets nw.mergedata(ex.attempts, ex.checks)  if (FALSE) { # \\dontrun{ # Optionally specify the new dataframe name nw.mergedata(ex.attempts, ex.checks, output = \"merged_data\") } # }"},{"path":"https://engagement-center.github.io/nestwatchR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://engagement-center.github.io/nestwatchR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/wren_quickstart.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for NestWatch Workflow Examples — wren_quickstart","title":"Data for NestWatch Workflow Examples — wren_quickstart","text":"Data NestWatch database (V2), subset include nesting data Carolina (\"carwre\") Bewick's (\"bewwre\") wrens. un-cleaned un-filtered database.","code":""},{"path":"https://engagement-center.github.io/nestwatchR/reference/wren_quickstart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data for NestWatch Workflow Examples — wren_quickstart","text":"","code":"wren_quickstart"},{"path":"https://engagement-center.github.io/nestwatchR/reference/wren_quickstart.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data for NestWatch Workflow Examples — wren_quickstart","text":"dataframe 40290 observations 54 variables. See <https://doi.org/10.1002/ecy.4230> details variables.","code":""}]
